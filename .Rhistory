geom_vline(xintercept = breaks$brks)
breaks <- classIntervals(oppdata$index, n=5, style="quantile")
ggplot(data = oppdata) +
geom_density(aes(x = index)) +
geom_vline(xintercept = breaks$brks)
breaks <- classIntervals(oppdata$index, n=5, style="fisher")
ggplot(data = oppdata) +
geom_density(aes(x = index)) +
geom_vline(xintercept = breaks$brks)
slidify('index.Rmd')
summary(oppdata$index)
subset(oppdata, index > 1.2)
subset(oppdata, index < 3)
subset(oppdata, index < 3.7)
subset(oppdata, index < 3.8)
subset(oppdata, index < -3.8)
subset(oppdata, index < -3.7)
subset(oppdata, index < -3)
subset(oppdata, index < -2.5)
subset(oppdata, index < -2)
subset(oppdata, index > 1)
subset(oppdata, index > .5)
subset(oppdata, index > .8)
subset(oppdata, index > .9)
subset(oppdata, index > 1)
summary(qcew_t$jobchange)
subset(qcew_t, jobchange > .7)
subset(qcew_t, jobchange > .5)
subset(qcew_t, jobchange > .1)
subset(qcew_t, jobchange > .2)
subset(qcew_t, jobchange > .3)
subset(qcew_t, jobchange > .15)
summar(scale(qcew_t$jobchange))
summary(scale(qcew_t$jobchange))
subset(oppdata, Town == "Andover")
subset(oppdata, geo == "Andover")
subset(oppdata, town == "Andover")
names(oppdata)
subset(oppdata, NAME10_1 == "Andover")
.29 * .8 * .6 * .94 * .86 * -.34 * .91 * 6.47 * .78 * .99
rowMeans(subset(oppdata, NAME10_1 == "Andover"))
rowMeans(subset(oppdata, NAME10_1 == "Andover")[3:12])
rowMeans(subset(oppdata, NAME10_1 == "Burlington")[3:12])
rowMeans(subset(oppdata, NAME10_1 == "Simsbury")[3:12])
rowMeans(subset(oppdata, NAME10_1 == "Hartford")[3:12])
rowMeans(subset(oppdata, NAME10_1 == "Windham")[3:12])
subset(oppdata, NAME10_1 == "Windham")
rowMeans(subset(oppdata, NAME10_1 == "Hartford")[3:12], na.rm = T)
rowMeans(subset(oppdata, NAME10_1 == "Hamden")[3:12], na.rm = T)
subset(oppdata, NAME10_1 == "Hamden")
plot(oppdata)
plot(oppdata[3:12])
plot(oppdata[3:12])
breaks <- classIntervals(oppdata$index, n=5, style="quintiles")
breaks <- classIntervals(oppdata$index, n=5, style="quantiles")
breaks <- classIntervals(oppdata$index, n=5, style="quantile")
x <- subset(oppdata, commutetime != "NA")
prcomp(x[, -index], scale. = T)
prcomp(x, scale. = T)
x <- subset(oppdata[3:11], commutetime != "NA")
prcomp(x, scale. = T)
View(x)
subset(oppdata[3:11], commutetime != "NA" &
Total.Mathematics.Avg.Scale.Score != "NA" &
1>0)
x <- subset(oppdata[3:11], commutetime != "NA" &
Total.Mathematics.Avg.Scale.Score != "NA" &
1>0)
prcomp(x, scale. = T)
x <- subset(oppdata[3:11], commutetime != "NA" &
Total.Mathematics.Avg.Scale.Score != "NA")
pca1 = prcomp(x, scale. = T)
scores = as.data.frame(pca1$x)
ggplot(data = scores, aes(x = PC1, y = PC2, label = rownames(scores))) +
geom_hline(yintercept = 0, colour = "gray65") +
geom_vline(xintercept = 0, colour = "gray65") +
geom_text(colour = "tomato", alpha = 0.8, size = 4)
plot(x$index, pca1$x[,1])
plot(prcomp(x, scale = T))
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
round(cor(oppdata[,-index]),2)
oppdata[,-index]
round(cor(oppdata[,-oppdata$index]),2)
round(cor(oppdata[,-"index"]),2)
oppdata[,-index]
round(cor(oppdata[3:12]),2)
round(cor(oppdata[3:12], na.rm = T),2)
slidify('index.Rmd')
round(cor(oppdata[3:12], na.rm = T),2)
round(cor(x),2)
slidify('index.Rmd')
x <- subset(oppdata[3:12], commutetime != "NA" &
Total.Mathematics.Avg.Scale.Score != "NA")
round(cor(x),2)
x <- subset(oppdata[3:12], commutetime != "NA" &
Total.Mathematics.Avg.Scale.Score != "NA" &
Total.Reading.Average.Scale.Score != "NA")
round(cor(x),2)
pca1 = prcomp(x, scale. = T)
print(pca1)
summary(pca1)
pca$rotation[,1]
pca1$rotation[,1]
predict(pca1[,1])
predict(pca1)[,1]
pca_map <- predict(pca1)[,1]
names(pca_map)
pca_map
data.frame(pca_map)
names(data.frame(pca_map))
slidify('index.Rmd')
summary(pca1)
print(pca1)
data.frame(summary(oppdata))
as.table(summary(oppdata))
subset(qcew_t, jobchange > 1)
subset(qcew_t, jobchange > .8)
print(xtable(summary(oppdata[10:12])), type = "html")
library(xtable)
print(xtable(summary(oppdata[10:12])), type = "html")
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
print(xtable(summary(pca1))
)
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
library(ggplot2)
library(reshape)
library(scales)
library(gridExtra)
refugees <- read.csv('Arrivals by Destination and Natoinality.csv')
refugees <- subset(refugees, refugees$textbox12City %in% levels(towns$Town))
refugees$textbox12City <- factor(refugees$textbox12City)
refugees$textbox14 <- gsub(pattern = "CY ",replacement = "",refugees$textbox14)
refugees$TownType = ifelse(refugees$textbox12City == "Hartford","Hartford","Suburbs")
refugees_agg <- ddply(refugees, .(TownType, textbox6, textbox14), summarise,
count = sum(textbox18))
ggplot(data = subset(refugees_agg, textbox6 %in% c('Bhutan',
'Bosnia and Herzegovina',
'Burma',
'Burundi',
'Cuba',
'Iraq',
'Liberia',
'Russia',
'Somalia',
'Sudan')),
aes(x = textbox14, y = count)) +
geom_line(aes(group = TownType, colour = TownType)) +
facet_wrap(~ textbox6, ncol = 2) +
theme_minimal() +
labs(x = 'Year', y = 'Number of arrivals')
refugees <- read.csv('../regionalreport/mockup/Arrivals by Destination and Natoinality.csv')
refugees <- subset(refugees, refugees$textbox12City %in% levels(towns$Town))
refugees$textbox12City <- factor(refugees$textbox12City)
refugees$textbox14 <- gsub(pattern = "CY ",replacement = "",refugees$textbox14)
refugees$TownType = ifelse(refugees$textbox12City == "Hartford","Hartford","Suburbs")
refugees_agg <- ddply(refugees, .(TownType, textbox6, textbox14), summarise,
count = sum(textbox18))
ggplot(data = subset(refugees_agg, textbox6 %in% c('Bhutan',
'Bosnia and Herzegovina',
'Burma',
'Burundi',
'Cuba',
'Iraq',
'Liberia',
'Russia',
'Somalia',
'Sudan')),
aes(x = textbox14, y = count)) +
geom_line(aes(group = TownType, colour = TownType)) +
facet_wrap(~ textbox6, ncol = 2) +
theme_minimal() +
labs(x = 'Year', y = 'Number of arrivals')
summary(oppdata[2:9])
summary(oppdata[3:9])
summary(oppdata[10:12])
mapping <- read.csv('tractstowns2.csv')
#Add the town names to the tract-level data
oppdata <- merge(oppdata, mapping[c("NAME10","NAME10_1")], by.x = "geo", by.y = "NAME10", all.x = T)
#Load the qcew data
qcew <- read.csv('qcew-annual-averages.csv', na.strings = "*")
#Cast into new format to get growth rate in employment
qcew_t <- cast(qcew, Town ~ Year, value = "Annual.Average.Employment")
names(qcew_t) <- make.names(names(qcew_t))
qcew_t$jobchange = (qcew_t$X2012 - qcew_t$X2009) / as.numeric(qcew_t$X2009)
oppdata <- merge(oppdata,
qcew_t[c("Town","jobchange")],
by.x = "NAME10_1",
by.y = "Town",
all.x = T)
#Load the test scores data
#Need to manually change code regional school districts
#Fill missing years for some towns, i.e. Newtown 2013
cmt <- read.csv('ctreports-2013-grade-3-cmt.csv', na.strings = "-")
#Merge avg. scale scores with rest of oppdata
oppdata <- merge(oppdata,
cmt[c("Group",
"Total.Mathematics.Avg.Scale.Score",
"Total.Reading.Average.Scale.Score")],
by.x = "NAME10_1",
by.y = "Group",
all.x = T)
library(reshape)
library(reshape)
mapping <- read.csv('tractstowns2.csv')
#Add the town names to the tract-level data
oppdata <- merge(oppdata, mapping[c("NAME10","NAME10_1")], by.x = "geo", by.y = "NAME10", all.x = T)
#Load the qcew data
qcew <- read.csv('qcew-annual-averages.csv', na.strings = "*")
#Cast into new format to get growth rate in employment
qcew_t <- cast(qcew, Town ~ Year, value = "Annual.Average.Employment")
names(qcew_t) <- make.names(names(qcew_t))
qcew_t$jobchange = (qcew_t$X2012 - qcew_t$X2009) / as.numeric(qcew_t$X2009)
oppdata <- merge(oppdata,
qcew_t[c("Town","jobchange")],
by.x = "NAME10_1",
by.y = "Town",
all.x = T)
cmt <- read.csv('ctreports-2013-grade-3-cmt.csv', na.strings = "-")
#Merge avg. scale scores with rest of oppdata
oppdata <- merge(oppdata,
cmt[c("Group",
"Total.Mathematics.Avg.Scale.Score",
"Total.Reading.Average.Scale.Score")],
by.x = "NAME10_1",
by.y = "Group",
all.x = T)
summary(oppdata[10:12])
rm(oppdata)
rm(qcew)
rm(qcew_t)
rm(cmt)
rm(refugees)
rm(refugees_agg)
rm(scores)
rm(perc.rank)
getwd()
require(slidify)
slidify('index.Rmd')
rm(choropleth)
rm(oppdata)
rm(qcew)
rm(qcew_t)
rm(cmt)
slidify('index.Rmd')
choropleth=merge(CTTracts, oppdata[c("geo","index")],
by.x = "id", by.y="geo")
choropleth=choropleth[order(choropleth$order), ]
breaks <- classIntervals(oppdata$index, n=5, style="jenks")
choropleth$index=cut(choropleth$index,
breaks=breaks$brks,
include.lowest=T, dig.lab = T)
#Make the map
ggplot(data = choropleth, aes(long, lat, group = group)) +
geom_polygon(aes(fill = index)) +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
labs(x = NULL, y = NULL) +
coord_equal() +
#  geom_polygon(data = CTTracts, colour = "grey", alpha = 0.1, fill = NA) +
scale_fill_brewer(palette = "Purples", name = "Oppty index\n(Z-scores)") +
theme_minimal()
breaks <- classIntervals(oppdata$index, n=5, style="jenks")
ggplot(data = oppdata) +
geom_density(aes(x = index)) +
geom_vline(xintercept = breaks$brks)
breaks <- classIntervals(oppdata$index, n=5, style="quantile")
ggplot(data = oppdata) +
geom_density(aes(x = index)) +
geom_vline(xintercept = breaks$brks)
oppdata <- data.frame(B23006.tract,
B19058.tract[2],
B17017.tract[2],
B23025.tract[2],
B25008.tract[2],
B08013.tract[2],
B25002.tract[2],
check.names = F)
summary(oppdata[2:8])
slidify('index.Rmd')
slidify('index.Rmd')
print(xtable(round(cor(x),2)), type = "html")
prcomp(x, scale. = T)
subset(oppdata[3:12], commutetime != "NA" &
Total.Mathematics.Avg.Scale.Score != "NA" &
Total.Reading.Average.Scale.Score != "NA")
View(x)
summary(x)
x <- subset(oppdata[3:12], commutetime != "NA" &
Total.Mathematics.Avg.Scale.Score != "NA" &
Total.Reading.Average.Scale.Score != "NA" &
jobchange != "NA")
x <- subset(oppdata[3:12], commutetime != "NA" &
Total.Mathematics.Avg.Scale.Score != "NA" &
Total.Reading.Average.Scale.Score != "NA" &
jobchange != "NA")
names(oppdata)
rm(oppdata)
rm(choropleth)
rm(qcew_t)
rm(qcew)
rm(cmt)
rm(x)
slidify('index.Rmd')
x <- subset(oppdata[3:12], commutetime != "NA" &
Total.Mathematics.Avg.Scale.Score != "NA" &
Total.Reading.Average.Scale.Score != "NA" &
jobchange != "NA")
names(oppdata)
head(oppdata)
slidify('index.Rmd')
slidify('index.Rmd')
x <- subset(oppdata[3:12], commutetime != "NA" &
Total.Mathematics.Avg.Scale.Score != "NA" &
Total.Reading.Average.Scale.Score != "NA" &
jobchange != "NA")
getwd()
require(slidify)
subset(oppdata[3:12], commutetime != "NA" &
Total.Mathematics.Avg.Scale.Score != "NA" &
Total.Reading.Average.Scale.Score != "NA" &
jobchange != "NA")
getwd()
install.packages(c("devtools", "e1071", "evaluate", "Hmisc"))
install.packages(c("devtools", "e1071", "evaluate", "Hmisc"))
install.packages(c("httr", "igraph", "maptools", "markdown", "memoise"))
install.packages(c("plyr", "reshape", "reshape2", "rgeos", "RgoogleMaps"))
install.packages(c("RJSONIO", "scales", "sp", "xtable", "yaml", "zoo"))
getwd()
require(slidify)
require(devtools)
install_github("slidify", "ramnathv")
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
slidify('index.Rmd')
View(oppdata)
View(qcew_t)
subset(oppdata[3:12], commutetime != "NA" &
Total.Mathematics.Avg.Scale.Score != "NA" &
Total.Reading.Average.Scale.Score != "NA" &
jobchange != "NA")
x <- subset(oppdata[3:12], commutetime != "NA" &
Total.Mathematics.Avg.Scale.Score != "NA" &
Total.Reading.Average.Scale.Score != "NA" &
jobchange != "NA")
print(xtable(round(cor(x),2)), type = "html")
library(xtable)
print(xtable(round(cor(x),2)), type = "html")
prcomp(x, scale. = T)
pca1 = prcomp(x, scale. = T)
print(pca1)
print(pca1$rotation[,1])
plot(prcomp(x, scale = T))
pca1$rotation[,1]
plot(pca1$rotation[,1])
qplot(data = pca1, x = rotation[,1], y = rotation)
library(ggplot2)
library(ggplot)
library(reshape)
qplot(data = pca1, x = rotation[,1], y = rotation)
install.packages("ggplot2")
library(reshape)
library(ggplot2)
qplot(data = pca1, x = rotation[,1], y = rotation)
data.frame(pca1$rotation[,1])
rotation <- data.frame(pca1$rotation[,1])
names(rotation)
qplot(data = rotation, y = pca1.rotation...1.)
row.names(rotation)
qplot(data = rotation, x = pca1.rotation...1., y = row.names(rotation))
qplot(data = rotation, x = pca1.rotation...1., y = row.names(rotation)) +
labs(x = "Weight in first principal component", y = NULL)
plot(oppdata$index, oppdata$poverty)
ggplot(data = oppdata, aes(y = index, x = poverty)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data = oppdata, aes(y = index, x = poverty)) +
geom_point() +
geom_smooth()
subset(oppdata, poverty < -4)
ggplot(data = subset(oppdata, poverty > -6), aes(y = index, x = poverty)) +
geom_point() +
geom_smooth()
ggplot(data = subset(oppdata, poverty > -6), aes(y = index, x = poverty)) +
geom_point() +
geom_smooth(method = lm)
summary(lm(index ~ poverty, data = oppdata))
ggplot(data = subset(oppdata, poverty > -6), aes(y = index, x = poverty)) +
geom_point() +
geom_smooth(method = lm) +
labs(y = "Opportunity Index", x = "Poverty z-scores")
summary(lm(index ~ poverty + jobchange, data = oppdata))
summary(lm(index ~ poverty + jobchange + commutetime, data = oppdata))
summary(lm(index ~ poverty + publicassistance + jobchange + commutetime, data = oppdata))
xtable(summary(pca1))
summary(pca1)
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
x <- subset(oppdata[3:12], commutetime != "NA" &
Total.Mathematics.Avg.Scale.Score != "NA" &
Total.Reading.Average.Scale.Score != "NA" &
jobchange != "NA")
print(xtable(round(cor(x),2)), type = "html")
summary(lm(index ~ publicassistance, data = oppdata))
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
head(oppdata)
names(oppdata)
oppdata <- data.frame(B23006.tract,
B19058.tract[2],
B17017.tract[2],
B23025.tract[2],
B25008.tract[2],
B08013.tract[2],
B25002.tract[2],
check.names = F)
oppdata$geo= gsub("Census Tract ", "", oppdata$geo)
oppdata$geo= gsub(", (Fairfield|Hartford|Litchfield|Middlesex|New Haven|New London|Tolland|Windham) County, Connecticut","", oppdata$geo)
oppdata <- merge(oppdata,
cmt[c("Group",
"Total.Mathematics.Avg.Scale.Score",
"Total.Reading.Average.Scale.Score")],
by.x = "NAME10_1",
by.y = "Group",
all.x = T)
library(reshape)
mapping <- read.csv('tractstowns2.csv')
#Add the town names to the tract-level data
oppdata <- merge(oppdata, mapping[c("NAME10","NAME10_1")], by.x = "geo", by.y = "NAME10", all.x = T)
#Load the qcew data
qcew <- read.csv('qcew-annual-averages.csv', na.strings = "*")
#Cast into new format to get growth rate in employment
qcew_t <- cast(qcew, Town ~ Year, value = "Annual.Average.Employment")
names(qcew_t) <- make.names(names(qcew_t))
qcew_t$jobchange = (qcew_t$X2012 - qcew_t$X2009) / as.numeric(qcew_t$X2009)
oppdata <- merge(oppdata,
qcew_t[c("Town","jobchange")],
by.x = "NAME10_1",
by.y = "Town",
all.x = T)
#Load the test scores data
#Need to manually change code regional school districts
#Fill missing years for some towns, i.e. Newtown 2013
cmt <- read.csv('ctreports-2013-grade-3-cmt.csv', na.strings = "-")
#Merge avg. scale scores with rest of oppdata
oppdata <- merge(oppdata,
cmt[c("Group",
"Total.Mathematics.Avg.Scale.Score",
"Total.Reading.Average.Scale.Score")],
by.x = "NAME10_1",
by.y = "Group",
all.x = T)
names(oppdata)
oppdata[3:12] <- scale(oppdata[3:12], center = T, scale = T)
oppdata$index = rowMeans(oppdata[3:12], na.rm = T)
write(oppdata, "oppdata.csv", row.names = F)
write.csv(oppdata, "oppdata.csv", row.names = F)
slidify('index.Rmd')
library(slidify)
slidify('index.Rmd')
library(slidify)
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
oned <- read.csv('OneDIndexData.csv')
plot(oned)
plot(oned[4:8])
round(cor(oned[4:8]),2)
prcomp(oned[4:8], scale = T)
pc_oned <- prcomp(oned[4:8], scale = T)
summary(pc_oned)
plot(prcomp(oned, scale = T))
plot(pc_oned)
plot(x$index, pca1$x[,1])
scores = as.data.frame(pca1$x)
as.data.frame(pc_oned$x)
rm(scores)
names(oned)
summary(lm(OneD.Index ~ Economic.Prosperity.Index, data = oned))
slidify('index.Rmd')
rm(pca_map)
rm(pca3)
rm(perc.rank)
rm(refugees)
rm(refugees_agg)
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
getwd()
library(slidify)
slidify('index.Rmd')
